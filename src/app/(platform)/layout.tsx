// src/app/(platform)/layout.tsx
// This file was generated by the create_platform_shell.py script.
'use client'; 

import React, { useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import Navbar from '@/components/layout/Navbar'; 

export default function PlatformLayout({
  children,
}: {
  children: ReactNode;
}) {
  const { user, isLoading } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    // If loading is finished and there's no user, redirect to login
    if (!isLoading && !user) {
      router.push('/login'); 
    }
  }, [user, isLoading, router]);

  // While loading auth state, show a loading message or spinner
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <p className="text-xl text-indigo-700">Loading application...</p>
        {/* You can replace this with a more sophisticated spinner component later */}
      </div>
    );
  }

  // If there's no user AFTER loading, it means redirection should be happening or has failed.
  // Returning null or a redirect message might be appropriate if redirection is slow.
  // However, the useEffect should handle the redirect.
  if (!user) {
     // This case should ideally be covered by the redirect in useEffect.
     // If reached, it might mean the redirect is pending or there's a brief moment before it occurs.
     // You could return a minimal loading state or null.
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <p className="text-xl text-indigo-700">Redirecting to login...</p>
        </div>
    );
  }

  // User is authenticated, render the platform layout with Navbar
  return (
    <div className="min-h-screen flex flex-col bg-gray-50"> {/* Added a light bg to platform area */}
      <Navbar />
      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </main>
      <footer className="bg-gray-200 text-center p-4 text-sm text-gray-600 border-t border-gray-300">
        MGS CS Hub Platform &copy; {new Date().getFullYear()}
      </footer>
    </div>
  );
}
