import os

# --- File Contents ---

navbar_content = """// src/components/layout/Navbar.tsx
// This file was generated by the create_platform_shell.py script.
'use client';

import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { signOut } from 'firebase/auth';
import { auth } from '@/config/firebase';
import { useAuthStore } from '@/store/authStore';

export default function Navbar() {
  const { user, setUser, setLoading, setError } = useAuthStore();
  const router = useRouter();

  const handleLogout = async () => {
    setLoading(true);
    setError(null); // Clear previous errors
    try {
      await signOut(auth);
      setUser(null); // Clear user from Zustand store
      router.push('/login'); // Redirect to login page
    } catch (error: any) {
      console.error("Logout Error:", error);
      setError("Failed to logout. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <nav className="bg-gray-800 text-white p-4 shadow-md sticky top-0 z-50">
      <div className="container mx-auto flex justify-between items-center">
        <Link href="/" className="text-xl font-bold hover:text-gray-300 transition-colors">
          MGS CS Hub
        </Link>
        <div className="flex items-center space-x-4">
          {user ? (
            <>
              <span className="text-sm hidden sm:inline">Welcome, {user.email || 'User'}</span>
              <button
                onClick={handleLogout}
                className="bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-3 rounded-md text-sm font-medium transition-colors"
              >
                Logout
              </button>
            </>
          ) : (
            <Link
              href="/login"
              className="bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-3 rounded-md text-sm font-medium transition-colors"
            >
              Login
            </Link>
          )}
        </div>
      </div>
    </nav>
  );
}
"""

platform_layout_content = """// src/app/(platform)/layout.tsx
// This file was generated by the create_platform_shell.py script.
'use client'; 

import React, { useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import Navbar from '@/components/layout/Navbar'; 

export default function PlatformLayout({
  children,
}: {
  children: ReactNode;
}) {
  const { user, isLoading } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    // If loading is finished and there's no user, redirect to login
    if (!isLoading && !user) {
      router.push('/login'); 
    }
  }, [user, isLoading, router]);

  // While loading auth state, show a loading message or spinner
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <p className="text-xl text-indigo-700">Loading application...</p>
        {/* You can replace this with a more sophisticated spinner component later */}
      </div>
    );
  }

  // If there's no user AFTER loading, it means redirection should be happening or has failed.
  // Returning null or a redirect message might be appropriate if redirection is slow.
  // However, the useEffect should handle the redirect.
  if (!user) {
     // This case should ideally be covered by the redirect in useEffect.
     // If reached, it might mean the redirect is pending or there's a brief moment before it occurs.
     // You could return a minimal loading state or null.
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <p className="text-xl text-indigo-700">Redirecting to login...</p>
        </div>
    );
  }

  // User is authenticated, render the platform layout with Navbar
  return (
    <div className="min-h-screen flex flex-col bg-gray-50"> {/* Added a light bg to platform area */}
      <Navbar />
      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </main>
      <footer className="bg-gray-200 text-center p-4 text-sm text-gray-600 border-t border-gray-300">
        MGS CS Hub Platform &copy; {new Date().getFullYear()}
      </footer>
    </div>
  );
}
"""

teacher_dashboard_content = """// src/app/(platform)/teacher/dashboard/page.tsx
// This file was generated by the create_platform_shell.py script.
'use client';

import React from 'react';
import { useAuthStore } from '@/store/authStore'; 

export default function TeacherDashboardPage() {
  const { user } = useAuthStore();

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h1 className="text-2xl sm:text-3xl font-bold text-indigo-700 mb-6">
        Teacher Dashboard
      </h1>
      {user && (
        <p className="text-lg text-gray-700 mb-2">
          Welcome back, <span className="font-semibold">{user.email}</span>!
        </p>
      )}
      <p className="mt-4 text-gray-600">
        This is where your class overviews, assignment management, and student progress tracking tools will appear.
      </p>
      <div className="mt-6 border-t pt-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-3">Quick Actions</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {/* Placeholder for quick action links/buttons */}
          <div className="bg-indigo-50 p-4 rounded-lg hover:shadow-lg transition-shadow">
            <h3 className="font-medium text-indigo-600">Manage Classes</h3>
            <p className="text-sm text-gray-500 mt-1">View, create, or edit your classes.</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg hover:shadow-lg transition-shadow">
            <h3 className="font-medium text-green-600">Assign Work</h3>
            <p className="text-sm text-gray-500 mt-1">Browse resources and assign to students.</p>
          </div>
        </div>
      </div>
    </div>
  );
}
"""

student_dashboard_content = """// src/app/(platform)/student/dashboard/page.tsx
// This file was generated by the create_platform_shell.py script.
'use client';

import React from 'react';
import { useAuthStore } from '@/store/authStore';

export default function StudentDashboardPage() {
  const { user } = useAuthStore();

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h1 className="text-2xl sm:text-3xl font-bold text-green-700 mb-6">
        Student Dashboard
      </h1>
      {user && (
        <p className="text-lg text-gray-700 mb-2">
          Hello, <span className="font-semibold">{user.email || 'Student'}</span>!
        </p>
      )}
      <p className="mt-4 text-gray-600">
        Your assigned worksheets, upcoming deadlines, and recent feedback will be displayed here.
      </p>
      <div className="mt-6 border-t pt-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-3">Current Assignments</h2>
        {/* Placeholder for assignment list */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <p className="text-sm text-gray-500">No assignments yet. Check back soon!</p>
        </div>
      </div>
    </div>
  );
}
"""

def write_file(file_path, content, project_root="."):
    full_path = os.path.join(project_root, file_path)
    try:
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"SUCCESS: File created/updated: {full_path}")
    except IOError as e:
        print(f"ERROR writing {full_path}: {e}")
    except Exception as e:
        print(f"Unexpected error writing {full_path}: {e}")

def main():
    project_root = os.getcwd()
    print(f"--- Creating Platform Shell Components ---")
    print(f"Running in project root: {project_root}")
    
    proceed = input("\nProceed with creating Navbar, Platform Layout, and placeholder Dashboards? (yes/no): ")
    if proceed.lower() != 'yes':
        print("Operation cancelled.")
        return

    # Define file paths (relative to project_root/src)
    navbar_file = os.path.join("src", "components", "layout", "Navbar.tsx")
    platform_layout_file = os.path.join("src", "app", "(platform)", "layout.tsx")
    teacher_dashboard_file = os.path.join("src", "app", "(platform)", "teacher", "dashboard", "page.tsx")
    student_dashboard_file = os.path.join("src", "app", "(platform)", "student", "dashboard", "page.tsx")

    # Create Navbar
    print(f"\nCreating Navbar ({navbar_file})...")
    write_file(navbar_file, navbar_content, project_root)
    
    # Create Platform Layout
    print(f"\nCreating Platform Layout ({platform_layout_file})...")
    write_file(platform_layout_file, platform_layout_content, project_root)

    # Create Teacher Dashboard
    print(f"\nCreating Teacher Dashboard ({teacher_dashboard_file})...")
    write_file(teacher_dashboard_file, teacher_dashboard_content, project_root)

    # Create Student Dashboard
    print(f"\nCreating Student Dashboard ({student_dashboard_file})...")
    write_file(student_dashboard_file, student_dashboard_content, project_root)

    print("\n--- Platform Shell Creation Complete ---")
    print("Next steps:")
    print("1. If your dev server is running, restart it (Ctrl+C then 'npm run dev' or 'yarn dev').")
    print("2. Log in via the /login page.")
    print("3. You should be redirected to /teacher/dashboard (currently a placeholder).")
    print("4. You should see the Navbar with your email and a logout button.")
    print("5. Test the logout button.")
    print("6. You can also manually navigate to /student/dashboard to see the student placeholder (though direct navigation might be blocked by the PlatformLayout if not logged in as a student with specific role checks later).")


if __name__ == "__main__":
    main()
