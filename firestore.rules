rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection (/users/{userId})
    // - Authenticated users can read their own profile.
    // - Authenticated users can update their own profile (e.g., passwordNeedsReset, classIds if student adds/drops).
    // - Creating user profiles is typically handled by a trusted server environment (like your Firebase Functions upon account creation).
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      // allow create: if request.auth != null; // Be cautious with create rules; often done via backend.
    }

    // Classes Collection (/classes/{classId})
    // - Teachers can create classes.
    // - Only the teacher who owns a class can read or modify it.
    // - Students can read classes they are enrolled in (if you store studentIds directly on class or use subcollections).
    match /classes/{classId} {
      allow read: if request.auth != null && 
                    (resource.data.teacherId == request.auth.uid || request.auth.uid in resource.data.studentIds);
      allow create: if request.auth != null && request.resource.data.teacherId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }

    // Worksheets Collection (/worksheets/{worksheetId})
    // - Authenticated users (teachers and students) can read worksheets.
    // - Writing worksheets is typically an admin/teacher function done via backend or console.
    match /worksheets/{worksheetId} {
      allow read: if request.auth != null;
      // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher'; // Example if teachers can create/edit
      allow write: if false; // For now, assume worksheets are added via script/console
    }

    // Assignments Collection (/assignments/{assignmentId})
    // - Teachers can create assignments for their classes.
    // - Students can read assignments for classes they are part of.
    // - Teachers can read/delete assignments they created.
    match /assignments/{assignmentId} {
      allow read: if request.auth != null; // Students will filter client-side based on their classIds
      allow create: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' &&
                       request.resource.data.teacherId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }

    // StudentProgress Collection (/studentProgress/{assignmentId_studentId} or just {progressId})
    // The example you provided uses {assignmentId} as the document ID, which means
    // the student's progress for a given assignment is one document.
    // The `studentId` field within that document is used for ownership.
    match /studentProgress/{progressId} {
      // Allow a student to create their progress document if studentId in the new doc matches their UID.
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;
      
      // Allow a student to read and write (update) their own progress document.
      allow read, update: if request.auth != null && resource.data.studentId == request.auth.uid;
      
      // Teachers might also need to read progress for students in their classes.
      // This is more complex and might involve checking the assignment's classId and teacherId.
      // Example for teacher read (simplified, assuming assignment details are in studentProgress doc or fetched separately):
      // allow read: if request.auth != null && (
      //   resource.data.studentId == request.auth.uid ||
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' // Add check for class ownership
      // );
      
      // Delete might be restricted or allowed for students to delete their own attempts.
      allow delete: if request.auth != null && resource.data.studentId == request.auth.uid;
    }

    // Add rules for any other collections you have.
  }
}